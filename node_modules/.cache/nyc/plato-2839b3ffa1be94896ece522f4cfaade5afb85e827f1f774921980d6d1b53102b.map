{"version":3,"file":"/home/usuario/dsi/practica7/src/plato.ts","sources":["/home/usuario/dsi/practica7/src/plato.ts"],"names":[],"mappings":"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","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\n\n/**\n * Tipo de datos Categoria. Existen 4 categorías posibles: Entrante, \n * primer plato, segundo plato o postre\n */\nexport type Categoria = 'ENTRANTE' | 'PRIMERO' | 'SEGUNDO' | 'POSTRE';\n\n/*\n * Esta es la clase Plato.\n */\nexport class Plato {\n  /**\n   * @param nombrePlato Nombre del plato.\n   * @param alimentos Array de pares [alimento, cantidad (en gramos)].\n   * @param categoria Categoría a la que pertenece el plato.\n   */\n  private precio: number = 0;\n  private macronutrientes_plato: Macronutrientes;\n  constructor(private nombrePlato: string, private alimentos: [Alimento, number][],\n    private categoria: Categoria) {\n      this.macronutrientes_plato = this.calculoMacronutrientes();\n      this.precio = this.calculoPrecio();\n  }\n\n  /**\n   * Obtiene el nombre del alimento.\n   * @returns Nombre del alimento.\n   */\n  getNombrePlato() {\n    return this.nombrePlato;\n  }\n\n  /**\n   * Obtiene la lista de alimentos y/o ingredientes que lo componen.\n   * @returns Lista de alimentos.\n   */\n  getAlimentos() {\n    return this.alimentos;\n  }\n\n  /**\n   * Obtiene el nombre de la categoría del plato.\n   * @returns Nombre de la categoría del plato.\n   */\n  getCategoria() {\n    return this.categoria;\n  }\n\n  /**\n   * Obtiene los macronutrientes en conjunto del plato.\n   * @returns Cantidad de macronutrientes del plato.\n   */\n  getMacronutrientesPlato() {\n    return this.macronutrientes_plato;\n  }\n\n  /**\n   * Obtiene el precio del plato en función a los ingredientes utilizados y su cantidad.\n   * @returns Precio del plato.\n   */\n  getPrecio() {\n    return this.precio;\n  }\n\n  /**\n   * Realiza el cálculo de los macronutrientes del plato en base a la cantidad de cada alimento.\n   * @returns Macronutrientes del plato.\n   */\n  calculoMacronutrientes() {\n    let resultado: Macronutrientes = {carbohidratos: 0, proteinas: 0, lipidos: 0};\n    this.alimentos.forEach((elemento) => {\n      // Calculamos en función a la cantidad utilizada\n      resultado.carbohidratos += (elemento[0].getMacronutrientes().carbohidratos * elemento[1]) / 100;\n      resultado.lipidos += (elemento[0].getMacronutrientes().lipidos * elemento[1]) / 100;\n      resultado.proteinas += (elemento[0].getMacronutrientes().proteinas * elemento[1]) / 100;\n    });\n    return resultado;\n  }\n\n  /**\n   * Realiza el cálculo del precio en función a la cantidad utilizada de cada alimento.\n   * @return Precio (Euros).\n   */ \n  calculoPrecio(): number {\n    let sumatorio: number = 0;\n    this.alimentos.forEach((elemento) => {\n      const precio = elemento[0].getPrecio();\n      const precioGramo = (precio / 1000) * elemento[1];\n      sumatorio += precioGramo;\n    })\n    return sumatorio;\n  }\n\n  /**\n   * Calcula el grupo de alimento predominante, es decir, al grupo de alimentos que \n   * más aparece entre los ingredientes del plato\n   * @return El grupo más repetido.\n   */\n  calculoGrupoPredominante() {\n    this.alimentos.forEach((elemento) => {\n      const grupo = elemento[0].getGrupo();\n      let contadorAlimentos: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      switch (grupo) {\n        case 'CARNES':\n          contadorAlimentos[0]++;\n          if (contadorAlimentos[0] >= this.alimentos.length / 2)\n            return 'CARNES';\n          break;\n        case 'PESCADOS':\n          contadorAlimentos[1]++;\n          if (contadorAlimentos[1] >= this.alimentos.length / 2)\n            return 'PESCADOS';\n          break;\n        case 'HUEVOS':\n          contadorAlimentos[2]++;\n          if (contadorAlimentos[2] >= this.alimentos.length / 2)\n            return 'HUEVOS';\n          break;\n        case 'TOFU':\n          contadorAlimentos[3]++;\n          if (contadorAlimentos[3] >= this.alimentos.length / 2)\n            return 'TOFU';\n          break;\n        case 'FRUTOS_SECOS':\n          contadorAlimentos[4]++;\n          if (contadorAlimentos[4] >= this.alimentos.length / 2)\n            return 'FRUTOS_SECOS';\n          break;\n        case 'SEMILLAS':\n          contadorAlimentos[5]++;\n          if (contadorAlimentos[5] >= this.alimentos.length / 2)\n            return 'SEMILLAS';\n          break;\n        case 'LEGUMBRES':\n          contadorAlimentos[6]++;\n          if (contadorAlimentos[6] >= this.alimentos.length / 2)\n            return 'LEGUMBRES';\n          break;\n        case 'VERDURAS':\n          contadorAlimentos[7]++;\n          if (contadorAlimentos[7] >= this.alimentos.length / 2)\n            return 'VERDURAS';\n          break;\n        case 'HORTALIZAS':\n          contadorAlimentos[8]++;\n          if (contadorAlimentos[8] >= this.alimentos.length / 2)\n            return 'HORTALIZAS';\n          break;\n        case 'LACTEOS':\n          contadorAlimentos[9]++;\n          if (contadorAlimentos[9] >= this.alimentos.length / 2)\n            return 'LACTEOS';\n          break;\n        case 'CEREALES':\n          contadorAlimentos[10]++;\n          if (contadorAlimentos[10] >= this.alimentos.length / 2)\n            return 'CEREALES';\n          break;\n        case 'FRUTAS':\n          contadorAlimentos[11]++;\n          if (contadorAlimentos[11] >= this.alimentos.length / 2)\n            return 'FRUTAS';\n          break;\n        case 'PROCESADOS':\n          contadorAlimentos[12]++;\n          if (contadorAlimentos[12] >= this.alimentos.length / 2)\n            return 'PROCESADOS';\n          break;\n        default:\n          throw new Error(\"Error al calcular el grupo predominante.\");\n          break;\n      }\n      return 'MIX';\n    });\n  }\n}"]}