{"version":3,"file":"/home/usuario/dsi/practica7/src/comanda.ts","sources":["/home/usuario/dsi/practica7/src/comanda.ts"],"names":[],"mappings":"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","sourcesContent":["import { Carta } from \"./carta\";\nimport { Plato } from \"./plato\";\nimport { Menu } from \"./menu\";\n\nconst inquirer = require('inquirer');\n\n/**\n * Esta es la clase Comanda. \n */\nexport class Comanda {\n  /**\n   * Constructor de la clase Comanda.\n   * @param carta Nombre de la carta.\n   */\n  // Comanda -> [Lo que pide, cantidad de lo que pide]\n  private comanda: [Menu|Plato, number][] = [];\n  constructor(private carta: Carta) { //, private arrayComanda: [Menu|Plato, number][]) {\n  }\n\n  /**\n   * Obtiene la comanda.\n   * @returns La comanda entera.\n   */\n  mostrarComanda() {\n    return this.comanda;\n  }\n  \n  /**\n   * Método que permite al cliente añadir un menú a la comanda\n   * @param nombreMenu El nombre del menú que quiere añadir a la comanda.\n   * @param cantidadMenu La cantidad de menús que quiere añadir a la comanda.\n   */\n  sumarMenu(nombreMenu: string, cantidadMenu: number) {\n    const matchedMenus = this.carta.searchMenu(nombreMenu);\n    // EN ESTE PUNTO, SI HAY CERO O MÁS DE DOS COINCIDENCIAS EN EL MENÚ \n    // preguntar al cliente con cuál de ellas se quiere quedar u ofrecerle buscar de nuevo. \n\n    /**\n     * Esto lo que hace es que todos los platos que coincidan con el nombre buscado,\n     * los añade igualmente a la comanda y en la misma cantidad.\n     * Así que HAY QUE ARREGLARLO.\n     */\n    matchedMenus.forEach((element) => {\n      this.comanda.push([element, cantidadMenu]);\n    });\n  }\n\n  /**\n   * Método que permite al cliente añadir un plato a la comanda\n   * @param nombrePlato El nombre del plato que quiere añadir a la comanda.\n   * @param cantidadPlato La cantidad de este tipo de platos que quiere añadir a la comanda.\n   */\n  sumarPlato(nombrePlato: string, cantidadPlato: number) {\n    const matchedPlatos = this.carta.searchPlato(nombrePlato);\n\n    matchedPlatos.forEach((element) => {\n      this.comanda.push([element, cantidadPlato]);\n    });\n  }\n\n  /**\n   * Función para deshacer el guardián de tipos.\n   * @returns True si el objeto es de clase Menu.\n   */\n  isMenu(myObj: any): myObj is Menu {\n    return myObj.getNombreMenu() !== undefined;\n  }\n\n  /**\n   * Función para deshacer el guardián de tipos.\n   * @returns True si el objeto es de clase Plato.\n   */\n  isPlato(myObj: any): myObj is Plato {\n    return myObj.getNombrePlato() !== undefined;\n  }\n\n  /**\n   * Método que permite encontrar una comanda deseada.\n   * @param nombre Nombre de la comanda a buscar.\n   */\n  encontrarEnComanda(nombre: string) {\n    const matchedResults: (Menu|Plato)[] = [];\n    this.comanda[0].forEach((elemento) => {\n      console.log(elemento);\n      if (this.isMenu(elemento)) {\n        if (elemento.getNombreMenu().search(nombre) > -1) {\n          matchedResults.push(elemento);\n        }\n      } else if (this.isPlato(elemento)) {\n        if (elemento.getNombrePlato().search(nombre) > -1) {\n          matchedResults.push(elemento);\n        }\n      }\n    });\n    return matchedResults;\n  }\n\n  /**\n   * Método que permite eliminar una comanda deseada.\n   * @param nombre Nombre de la comanda a eliminar.\n   */\n  quitarElemento(nombreMenu: string, cantidadMenu: number) {\n    const matchedMenus: (Menu|Plato)[] = this.encontrarEnComanda(nombreMenu);\n    console.table(matchedMenus);      // IMPRIMIR PARA COMPROBAR QUÉ ENCUENTRA PARA BORRAR\n    let index;\n    let valorObjeto: (Menu|Plato);\n    this.comanda.forEach((elemento) => {\n      //valorObjeto = elemento[0];\n      index = this.comanda.indexOf(elemento, 0);\n      if (index > -1) {\n        this.comanda.splice(index, 1);\n      }\n        /*\n      if (this.isMenu(element[0])) {\n        index = this.comanda.indexOf(element[0], 0);\n        if (index > -1) {\n          this.comanda.splice(index, 1);\n        }\n      } else if (this.isPlato(element[0]) {\n        index = this.comanda.indexOf(element[0], 0);\n        if (index > -1) {\n          this.comanda.splice(index, 1);\n        }\n      }*/\n    });\n  }\n}\n\n/*\n* 1: Visualizar la carta del restaurante: Para cada menú y/o plato, \n*   el cliente querrá poder observar toda la información que tiene \n*   (precio, ingredientes, composición nutricional y grupos de alimentos).\n*\n* 2: Realizar una comanda: El cliente podra: -> Elegir una comanda del menu preestablecido\n*                                            -> Podra crear un menu personalizado en base a la carta -> visualizar la carta\n*                                                                                                     -> Elegir platos y cantidad\n*                                            -> Podra modificar uno de los menu preestablecidos -> Eliminando platos\n*/\n\n//Esto enumarara las diferentes opciones del menu principal\nenum options{\n  Visualizar = \"Visualizar la Carta\",\n  Comanda = \"Hacer comanda\",\n  Salir = \"Salir\"\n}\n\n//Segundo Menu para el caso de  Comandas\nasync function promptSecond(): Promise<void> {\n  console.clear();\n  inquirer.prompt({\n    type: 'list',\n    name: 'segundarespuesta',\n    Message: '¿Que desea hacer ahora?',\n    choices: ''\n    \n  })\n}\n\n// Funcion principal del menu \nfunction promptComanda(){\n  console.clear();\n  //seria necesario el async si quisieramos ejecutar algo aqui a parte como la visualizacion de algo\n  const answers = inquirer.prompt({\n    type: 'list',\n    name: 'respuesta',\n    message: 'Seleccione una opcion:',\n    choices: Object.values(options)\n  });\n  \n  switch (answers[\"respuesta\"]) {\n    case options.Visualizar:\n      //Llamada a un funcion que devuelva la carta del restaurante \n      //let miCarta = new Carta(nombre,todos los menus de la carta, platos sueltos);\n      break;\n\n    case options.Comanda:\n      //Aqui va la funcion que ejecuta un menu interno que permite modificar o seleccionar un menu personalizado\n      break;\n    case options.Salir:\n      //salimos\n      break;\n  }\n}"]}