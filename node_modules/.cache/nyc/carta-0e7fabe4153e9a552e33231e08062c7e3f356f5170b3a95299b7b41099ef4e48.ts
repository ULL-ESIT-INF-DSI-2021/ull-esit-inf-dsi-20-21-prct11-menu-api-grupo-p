"use strict";function cov_xmz0suc1t(){var path="/home/usuario/dsi/practica7/src/carta.ts";var hash="48816ef903b99eb6c91033a38235d50933ddf83e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/dsi/practica7/src/carta.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:23}},"2":{start:{line:4,column:15},end:{line:4,column:32}},"3":{start:{line:10,column:8},end:{line:10,column:39}},"4":{start:{line:17,column:8},end:{line:17,column:28}},"5":{start:{line:18,column:8},end:{line:18,column:37}},"6":{start:{line:19,column:8},end:{line:19,column:35}},"7":{start:{line:20,column:8},end:{line:20,column:53}},"8":{start:{line:30,column:24},end:{line:30,column:66}},"9":{start:{line:31,column:8},end:{line:31,column:39}},"10":{start:{line:38,column:8},end:{line:38,column:32}},"11":{start:{line:45,column:8},end:{line:45,column:30}},"12":{start:{line:52,column:8},end:{line:52,column:39}},"13":{start:{line:59,column:25},end:{line:59,column:27}},"14":{start:{line:60,column:8},end:{line:60,column:78}},"15":{start:{line:61,column:8},end:{line:61,column:26}},"16":{start:{line:69,column:33},end:{line:69,column:35}},"17":{start:{line:70,column:8},end:{line:74,column:11}},"18":{start:{line:71,column:12},end:{line:73,column:13}},"19":{start:{line:72,column:16},end:{line:72,column:47}},"20":{start:{line:75,column:8},end:{line:75,column:32}},"21":{start:{line:83,column:35},end:{line:83,column:37}},"22":{start:{line:84,column:8},end:{line:88,column:11}},"23":{start:{line:85,column:12},end:{line:87,column:13}},"24":{start:{line:86,column:16},end:{line:86,column:53}},"25":{start:{line:89,column:8},end:{line:95,column:11}},"26":{start:{line:90,column:12},end:{line:94,column:15}},"27":{start:{line:91,column:16},end:{line:93,column:17}},"28":{start:{line:92,column:20},end:{line:92,column:58}},"29":{start:{line:96,column:8},end:{line:96,column:34}},"30":{start:{line:104,column:29},end:{line:104,column:31}},"31":{start:{line:105,column:8},end:{line:105,column:54}},"32":{start:{line:106,column:8},end:{line:106,column:55}},"33":{start:{line:107,column:8},end:{line:107,column:28}},"34":{start:{line:110,column:0},end:{line:110,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:60},end:{line:21,column:5}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:41},end:{line:32,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:21},end:{line:39,column:5}},line:37},"3":{name:"(anonymous_3)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:18},end:{line:46,column:5}},line:44},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:26},end:{line:53,column:5}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:15},end:{line:62,column:5}},line:58},"6":{name:"(anonymous_6)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:27},end:{line:76,column:5}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:70,column:31},end:{line:70,column:32}},loc:{start:{line:70,column:44},end:{line:74,column:9}},line:70},"8":{name:"(anonymous_8)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:29},end:{line:97,column:5}},line:82},"9":{name:"(anonymous_9)",decl:{start:{line:84,column:40},end:{line:84,column:41}},loc:{start:{line:84,column:57},end:{line:88,column:9}},line:84},"10":{name:"(anonymous_10)",decl:{start:{line:89,column:31},end:{line:89,column:32}},loc:{start:{line:89,column:45},end:{line:95,column:9}},line:89},"11":{name:"(anonymous_11)",decl:{start:{line:90,column:41},end:{line:90,column:42}},loc:{start:{line:90,column:59},end:{line:94,column:13}},line:90},"12":{name:"(anonymous_12)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:28},end:{line:108,column:5}},line:103}},branchMap:{"0":{loc:{start:{line:71,column:12},end:{line:73,column:13}},type:"if",locations:[{start:{line:71,column:12},end:{line:73,column:13}},{start:{line:71,column:12},end:{line:73,column:13}}],line:71},"1":{loc:{start:{line:85,column:12},end:{line:87,column:13}},type:"if",locations:[{start:{line:85,column:12},end:{line:87,column:13}},{start:{line:85,column:12},end:{line:87,column:13}}],line:85},"2":{loc:{start:{line:91,column:16},end:{line:93,column:17}},type:"if",locations:[{start:{line:91,column:16},end:{line:93,column:17}},{start:{line:91,column:16},end:{line:93,column:17}}],line:91}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/dsi/practica7/src/carta.ts",sources:["/home/usuario/dsi/practica7/src/carta.ts"],names:[],mappings:";;;AAKA,iCAA8B;AAG9B;;GAEG;AACH,MAAa,KAAK;IAShB,YAAoB,WAAmB,EAAE,SAAiB,EAAE,kBAA2B;QAAnE,gBAAW,GAAX,WAAW,CAAQ;QARvC;;;;;WAKG;QACK,cAAS,GAAW,EAAE,CAAC;QACvB,uBAAkB,GAAY,EAAE,CAAC;QAEvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,CAAC,gCAAgC;IAChF,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,MAAc,EAAE,MAAa,EAAE,GAAG,MAAe;QACzD,IAAI,SAAS,GAAG,IAAI,WAAI,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,IAAI,UAAU,GAAmB,EAAE,CAAC;QACpC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,UAAkB;QAC3B,MAAM,gBAAgB,GAAW,EAAE,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnD,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,WAAmB;QAC7B,MAAM,kBAAkB,GAAY,EAAE,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YAC9C,IAAI,WAAW,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzD,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;gBAC5C,IAAI,YAAY,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC1D,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,MAAc;QAC5B,MAAM,YAAY,GAAmB,EAAE,CAAC;QACxC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9C,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/C,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AA5GD,sBA4GC",sourcesContent:["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\nimport { Plato } from \"./plato\";\nimport { Categoria } from \"./plato\";\nimport { Menu } from \"./menu\";\nimport * as inquirer from 'inquirer';\n\n/*\n * Esta es la clase Carta.\n */\nexport class Carta {\n  /**\n   * Constructor de la clase Carta.\n   * @param nombreCarta Nombre de la carta.\n   * @param arrayMenu Todos los men\xFAs que contiene la carta.\n   * @param arrayPlatosSueltos Todos los platos sueltos para que el comensales dise\xF1en su propio men\xFA.\n   */\n  private arrayMenu: Menu[] = [];\n  private arrayPlatosSueltos: Plato[] = [];\n  constructor(private nombreCarta: string, arrayMenu: Menu[], arrayPlatosSueltos: Plato[]) {\n    this.arrayMenu = arrayMenu;\n    this.arrayPlatosSueltos = arrayPlatosSueltos; // si no, se queja que no existe\n  }\n\n  /**\n   * Permite a\xF1adir nuevos men\xFAs creados por los comensales, combinando\n   * platos sueltos ya existentes.\n   * @param nombre Nombre del nuevo men\xFA.\n   * @param plato1 Nombre del primer plato.\n   * @param platos Nombre de los dem\xE1s platos.\n   */\n  nuevoMenu(nombre: string, plato1: Plato, ...platos: Plato[]) {\n    let nuevoMenu = new Menu(nombre, plato1, ...platos);\n    this.arrayMenu.push(nuevoMenu);\n  }\n\n  /**\n   * Obtiene el nombre de la Carta.\n   * @returns Nombre de la carta.\n   */\n  getNombreCarta(): string {\n    return this.nombreCarta;\n  }\n\n  /**\n   * Obtiene el array de los Men\xFAs de la carta.\n   * @returns Array de men\xFAs.\n   */\n  getAllMenus(): Menu[] {\n    return this.arrayMenu;\n  }\n\n  /**\n   * Obtiene el array de los Platos sueltos de la carta.\n   * @returns Array de Platos Sueltos.\n   */\n  getAllPlatosSueltos(): Plato[] {\n    return this.arrayPlatosSueltos;\n  }\n\n  /**\n   * Obtiene la carta completa del restaurante (men\xFAs y platos sueltos).\n   * @returns Array con men\xFAs y platos sueltos.\n   */\n  getCarta() {\n    let arrayCarta: (Menu|Plato)[] = [];\n    arrayCarta.push(...this.getAllMenus(), ...this.getAllPlatosSueltos());\n    return arrayCarta;\n  }\n\n  /**\n   * Funci\xF3n que busca el nombre indicado entre los men\xFAs y \n   * devuelve todas las coincidencias.\n   * @returns Array de todos los men\xFAs que contengan esa cadena en su nombre.\n   */\n  searchMenu(nombreMenu: string): Menu[] {\n    const arrayMatchedMenu: Menu[] = [];\n    this.arrayMenu.forEach((element) => {\n      if (element.getNombreMenu().search(nombreMenu) > -1) {\n        arrayMatchedMenu.push(element);\n      }\n    });\n    return arrayMatchedMenu;\n  }\n\n  /**\n   * Funci\xF3n que busca el nombre indicado entre todos los Platos, es decir,\n   * entre los Platos sueltos y los Platos de un Men\xFA.\n   * @returns Array de Platos que contengan esa cadena en su nombre.\n   */\n  searchPlato(nombrePlato: string): Plato[] {\n    const arrayMatchedPlatos: Plato[] = [];\n    this.arrayPlatosSueltos.forEach((platoSuelto) => {\n      if (platoSuelto.getNombrePlato().search(nombrePlato) > -1) {\n        arrayMatchedPlatos.push(platoSuelto);\n      }\n    });\n    this.arrayMenu.forEach((cadaMenu) => {\n      cadaMenu.getPlatos().forEach((platoDelMenu) => {\n        if (platoDelMenu.getNombrePlato().search(nombrePlato) > -1) {\n          arrayMatchedPlatos.push(platoDelMenu);\n        }\n      });\n    });\n    return arrayMatchedPlatos;\n  }\n\n  /**\n   * Funci\xF3n que busca el string entre todos los nombres de todos los\n   * men\xFAs y todos los platos de la carta.\n   * @returns Array de todas las coincidencias (sean Men\xFAs o Platos).\n   */\n  searchEnGeneral(nombre: string): (Menu|Plato)[] {\n    const arrayMatched: (Menu|Plato)[] = [];\n    arrayMatched.push(...this.searchMenu(nombre));\n    arrayMatched.push(...this.searchPlato(nombre));\n    return arrayMatched;\n  }\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"48816ef903b99eb6c91033a38235d50933ddf83e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_xmz0suc1t=function(){return actualCoverage;};}return actualCoverage;}cov_xmz0suc1t();cov_xmz0suc1t().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_xmz0suc1t().s[1]++;exports.Carta=void 0;const menu_1=(cov_xmz0suc1t().s[2]++,require("./menu"));/*
 * Esta es la clase Carta.
 */class Carta{constructor(nombreCarta,arrayMenu,arrayPlatosSueltos){cov_xmz0suc1t().f[0]++;cov_xmz0suc1t().s[3]++;this.nombreCarta=nombreCarta;/**
         * Constructor de la clase Carta.
         * @param nombreCarta Nombre de la carta.
         * @param arrayMenu Todos los menús que contiene la carta.
         * @param arrayPlatosSueltos Todos los platos sueltos para que el comensales diseñen su propio menú.
         */cov_xmz0suc1t().s[4]++;this.arrayMenu=[];cov_xmz0suc1t().s[5]++;this.arrayPlatosSueltos=[];cov_xmz0suc1t().s[6]++;this.arrayMenu=arrayMenu;cov_xmz0suc1t().s[7]++;this.arrayPlatosSueltos=arrayPlatosSueltos;// si no, se queja que no existe
}/**
     * Permite añadir nuevos menús creados por los comensales, combinando
     * platos sueltos ya existentes.
     * @param nombre Nombre del nuevo menú.
     * @param plato1 Nombre del primer plato.
     * @param platos Nombre de los demás platos.
     */nuevoMenu(nombre,plato1,...platos){cov_xmz0suc1t().f[1]++;let nuevoMenu=(cov_xmz0suc1t().s[8]++,new menu_1.Menu(nombre,plato1,...platos));cov_xmz0suc1t().s[9]++;this.arrayMenu.push(nuevoMenu);}/**
     * Obtiene el nombre de la Carta.
     * @returns Nombre de la carta.
     */getNombreCarta(){cov_xmz0suc1t().f[2]++;cov_xmz0suc1t().s[10]++;return this.nombreCarta;}/**
     * Obtiene el array de los Menús de la carta.
     * @returns Array de menús.
     */getAllMenus(){cov_xmz0suc1t().f[3]++;cov_xmz0suc1t().s[11]++;return this.arrayMenu;}/**
     * Obtiene el array de los Platos sueltos de la carta.
     * @returns Array de Platos Sueltos.
     */getAllPlatosSueltos(){cov_xmz0suc1t().f[4]++;cov_xmz0suc1t().s[12]++;return this.arrayPlatosSueltos;}/**
     * Obtiene la carta completa del restaurante (menús y platos sueltos).
     * @returns Array con menús y platos sueltos.
     */getCarta(){cov_xmz0suc1t().f[5]++;let arrayCarta=(cov_xmz0suc1t().s[13]++,[]);cov_xmz0suc1t().s[14]++;arrayCarta.push(...this.getAllMenus(),...this.getAllPlatosSueltos());cov_xmz0suc1t().s[15]++;return arrayCarta;}/**
     * Función que busca el nombre indicado entre los menús y
     * devuelve todas las coincidencias.
     * @returns Array de todos los menús que contengan esa cadena en su nombre.
     */searchMenu(nombreMenu){cov_xmz0suc1t().f[6]++;const arrayMatchedMenu=(cov_xmz0suc1t().s[16]++,[]);cov_xmz0suc1t().s[17]++;this.arrayMenu.forEach(element=>{cov_xmz0suc1t().f[7]++;cov_xmz0suc1t().s[18]++;if(element.getNombreMenu().search(nombreMenu)>-1){cov_xmz0suc1t().b[0][0]++;cov_xmz0suc1t().s[19]++;arrayMatchedMenu.push(element);}else{cov_xmz0suc1t().b[0][1]++;}});cov_xmz0suc1t().s[20]++;return arrayMatchedMenu;}/**
     * Función que busca el nombre indicado entre todos los Platos, es decir,
     * entre los Platos sueltos y los Platos de un Menú.
     * @returns Array de Platos que contengan esa cadena en su nombre.
     */searchPlato(nombrePlato){cov_xmz0suc1t().f[8]++;const arrayMatchedPlatos=(cov_xmz0suc1t().s[21]++,[]);cov_xmz0suc1t().s[22]++;this.arrayPlatosSueltos.forEach(platoSuelto=>{cov_xmz0suc1t().f[9]++;cov_xmz0suc1t().s[23]++;if(platoSuelto.getNombrePlato().search(nombrePlato)>-1){cov_xmz0suc1t().b[1][0]++;cov_xmz0suc1t().s[24]++;arrayMatchedPlatos.push(platoSuelto);}else{cov_xmz0suc1t().b[1][1]++;}});cov_xmz0suc1t().s[25]++;this.arrayMenu.forEach(cadaMenu=>{cov_xmz0suc1t().f[10]++;cov_xmz0suc1t().s[26]++;cadaMenu.getPlatos().forEach(platoDelMenu=>{cov_xmz0suc1t().f[11]++;cov_xmz0suc1t().s[27]++;if(platoDelMenu.getNombrePlato().search(nombrePlato)>-1){cov_xmz0suc1t().b[2][0]++;cov_xmz0suc1t().s[28]++;arrayMatchedPlatos.push(platoDelMenu);}else{cov_xmz0suc1t().b[2][1]++;}});});cov_xmz0suc1t().s[29]++;return arrayMatchedPlatos;}/**
     * Función que busca el string entre todos los nombres de todos los
     * menús y todos los platos de la carta.
     * @returns Array de todas las coincidencias (sean Menús o Platos).
     */searchEnGeneral(nombre){cov_xmz0suc1t().f[12]++;const arrayMatched=(cov_xmz0suc1t().s[30]++,[]);cov_xmz0suc1t().s[31]++;arrayMatched.push(...this.searchMenu(nombre));cov_xmz0suc1t().s[32]++;arrayMatched.push(...this.searchPlato(nombre));cov_xmz0suc1t().s[33]++;return arrayMatched;}}cov_xmz0suc1t().s[34]++;exports.Carta=Carta;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vZHNpL3ByYWN0aWNhNy9zcmMvY2FydGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IitxV0FpQks7cU5BWkwsS0FBQSxDQUFBLE1BQUEseUJBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBR0E7O0FBRUcsR0FDSCxLQUFhLENBQUEsS0FBSyxDQVNoQixXQUFBLENBQW9CLFdBQXBCLENBQXlDLFNBQXpDLENBQTRELGtCQUE1RCxDQUF1RiwrQ0FBbkUsS0FBQSxXQUFBLENBQUEsV0FBQSxDQVJwQjs7Ozs7QUFLRyxXQUdvRix1QkFGL0UsS0FBQSxTQUFBLENBQW9CLEVBQXBCLENBRStFLHVCQUQvRSxLQUFBLGtCQUFBLENBQThCLEVBQTlCLENBQytFLHVCQUNyRixLQUFLLFNBQUwsQ0FBaUIsU0FBakIsQ0FEcUYsdUJBRXJGLEtBQUssa0JBQUwsQ0FBMEIsa0JBQTFCLENBQThDO0FBQy9DLENBRUQ7Ozs7OztBQU1HLE9BQ0gsU0FBUyxDQUFDLE1BQUQsQ0FBaUIsTUFBakIsQ0FBZ0MsR0FBRyxNQUFuQyxDQUFrRCx3QkFDekQsR0FBSSxDQUFBLFNBQVMseUJBQUcsR0FBSSxDQUFBLE1BQUEsQ0FBQSxJQUFKLENBQVMsTUFBVCxDQUFpQixNQUFqQixDQUF5QixHQUFHLE1BQTVCLENBQUgsQ0FBYixDQUR5RCx1QkFFekQsS0FBSyxTQUFMLENBQWUsSUFBZixDQUFvQixTQUFwQixFQUNELENBRUQ7OztBQUdHLE9BQ0gsY0FBYyxFQUFBLGdEQUNaLE1BQU8sTUFBSyxXQUFaLENBQ0QsQ0FFRDs7O0FBR0csT0FDSCxXQUFXLEVBQUEsZ0RBQ1QsTUFBTyxNQUFLLFNBQVosQ0FDRCxDQUVEOzs7QUFHRyxPQUNILG1CQUFtQixFQUFBLGdEQUNqQixNQUFPLE1BQUssa0JBQVosQ0FDRCxDQUVEOzs7QUFHRyxPQUNILFFBQVEsRUFBQSx3QkFDTixHQUFJLENBQUEsVUFBVSwwQkFBbUIsRUFBbkIsQ0FBZCxDQURNLHdCQUVOLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEdBQUcsS0FBSyxXQUFMLEVBQW5CLENBQXVDLEdBQUcsS0FBSyxtQkFBTCxFQUExQyxFQUZNLHdCQUdOLE1BQU8sQ0FBQSxVQUFQLENBQ0QsQ0FFRDs7OztBQUlHLE9BQ0gsVUFBVSxDQUFDLFVBQUQsQ0FBbUIsd0JBQzNCLEtBQU0sQ0FBQSxnQkFBZ0IsMEJBQVcsRUFBWCxDQUF0QixDQUQyQix3QkFFM0IsS0FBSyxTQUFMLENBQWUsT0FBZixDQUF3QixPQUFELEVBQVksZ0RBQ2pDLEdBQUksT0FBTyxDQUFDLGFBQVIsR0FBd0IsTUFBeEIsQ0FBK0IsVUFBL0IsRUFBNkMsQ0FBQyxDQUFsRCxDQUFxRCxtREFDbkQsZ0JBQWdCLENBQUMsSUFBakIsQ0FBc0IsT0FBdEIsRUFDRCxDQUZELGdDQUdELENBSkQsRUFGMkIsd0JBTzNCLE1BQU8sQ0FBQSxnQkFBUCxDQUNELENBRUQ7Ozs7QUFJRyxPQUNILFdBQVcsQ0FBQyxXQUFELENBQW9CLHdCQUM3QixLQUFNLENBQUEsa0JBQWtCLDBCQUFZLEVBQVosQ0FBeEIsQ0FENkIsd0JBRTdCLEtBQUssa0JBQUwsQ0FBd0IsT0FBeEIsQ0FBaUMsV0FBRCxFQUFnQixnREFDOUMsR0FBSSxXQUFXLENBQUMsY0FBWixHQUE2QixNQUE3QixDQUFvQyxXQUFwQyxFQUFtRCxDQUFDLENBQXhELENBQTJELG1EQUN6RCxrQkFBa0IsQ0FBQyxJQUFuQixDQUF3QixXQUF4QixFQUNELENBRkQsZ0NBR0QsQ0FKRCxFQUY2Qix3QkFPN0IsS0FBSyxTQUFMLENBQWUsT0FBZixDQUF3QixRQUFELEVBQWEsaURBQ2xDLFFBQVEsQ0FBQyxTQUFULEdBQXFCLE9BQXJCLENBQThCLFlBQUQsRUFBaUIsaURBQzVDLEdBQUksWUFBWSxDQUFDLGNBQWIsR0FBOEIsTUFBOUIsQ0FBcUMsV0FBckMsRUFBb0QsQ0FBQyxDQUF6RCxDQUE0RCxtREFDMUQsa0JBQWtCLENBQUMsSUFBbkIsQ0FBd0IsWUFBeEIsRUFDRCxDQUZELGdDQUdELENBSkQsRUFLRCxDQU5ELEVBUDZCLHdCQWM3QixNQUFPLENBQUEsa0JBQVAsQ0FDRCxDQUVEOzs7O0FBSUcsT0FDSCxlQUFlLENBQUMsTUFBRCxDQUFlLHlCQUM1QixLQUFNLENBQUEsWUFBWSwwQkFBbUIsRUFBbkIsQ0FBbEIsQ0FENEIsd0JBRTVCLFlBQVksQ0FBQyxJQUFiLENBQWtCLEdBQUcsS0FBSyxVQUFMLENBQWdCLE1BQWhCLENBQXJCLEVBRjRCLHdCQUc1QixZQUFZLENBQUMsSUFBYixDQUFrQixHQUFHLEtBQUssV0FBTCxDQUFpQixNQUFqQixDQUFyQixFQUg0Qix3QkFJNUIsTUFBTyxDQUFBLFlBQVAsQ0FDRCxDQTNHZSxDLHdCQUFsQixPQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFsaW1lbnRvIH0gZnJvbSBcIi4vYWxpbWVudG9cIjtcbmltcG9ydCB7IE1hY3JvbnV0cmllbnRlcyB9IGZyb20gXCIuL2FsaW1lbnRvXCJcbmltcG9ydCB7IEdydXBvIH0gZnJvbSBcIi4vYWxpbWVudG9cIjtcbmltcG9ydCB7IFBsYXRvIH0gZnJvbSBcIi4vcGxhdG9cIjtcbmltcG9ydCB7IENhdGVnb3JpYSB9IGZyb20gXCIuL3BsYXRvXCI7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSBcIi4vbWVudVwiO1xuaW1wb3J0ICogYXMgaW5xdWlyZXIgZnJvbSAnaW5xdWlyZXInO1xuXG4vKlxuICogRXN0YSBlcyBsYSBjbGFzZSBDYXJ0YS5cbiAqL1xuZXhwb3J0IGNsYXNzIENhcnRhIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGRlIGxhIGNsYXNlIENhcnRhLlxuICAgKiBAcGFyYW0gbm9tYnJlQ2FydGEgTm9tYnJlIGRlIGxhIGNhcnRhLlxuICAgKiBAcGFyYW0gYXJyYXlNZW51IFRvZG9zIGxvcyBtZW7DunMgcXVlIGNvbnRpZW5lIGxhIGNhcnRhLlxuICAgKiBAcGFyYW0gYXJyYXlQbGF0b3NTdWVsdG9zIFRvZG9zIGxvcyBwbGF0b3Mgc3VlbHRvcyBwYXJhIHF1ZSBlbCBjb21lbnNhbGVzIGRpc2XDsWVuIHN1IHByb3BpbyBtZW7Dui5cbiAgICovXG4gIHByaXZhdGUgYXJyYXlNZW51OiBNZW51W10gPSBbXTtcbiAgcHJpdmF0ZSBhcnJheVBsYXRvc1N1ZWx0b3M6IFBsYXRvW10gPSBbXTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBub21icmVDYXJ0YTogc3RyaW5nLCBhcnJheU1lbnU6IE1lbnVbXSwgYXJyYXlQbGF0b3NTdWVsdG9zOiBQbGF0b1tdKSB7XG4gICAgdGhpcy5hcnJheU1lbnUgPSBhcnJheU1lbnU7XG4gICAgdGhpcy5hcnJheVBsYXRvc1N1ZWx0b3MgPSBhcnJheVBsYXRvc1N1ZWx0b3M7IC8vIHNpIG5vLCBzZSBxdWVqYSBxdWUgbm8gZXhpc3RlXG4gIH1cblxuICAvKipcbiAgICogUGVybWl0ZSBhw7FhZGlyIG51ZXZvcyBtZW7DunMgY3JlYWRvcyBwb3IgbG9zIGNvbWVuc2FsZXMsIGNvbWJpbmFuZG9cbiAgICogcGxhdG9zIHN1ZWx0b3MgeWEgZXhpc3RlbnRlcy5cbiAgICogQHBhcmFtIG5vbWJyZSBOb21icmUgZGVsIG51ZXZvIG1lbsO6LlxuICAgKiBAcGFyYW0gcGxhdG8xIE5vbWJyZSBkZWwgcHJpbWVyIHBsYXRvLlxuICAgKiBAcGFyYW0gcGxhdG9zIE5vbWJyZSBkZSBsb3MgZGVtw6FzIHBsYXRvcy5cbiAgICovXG4gIG51ZXZvTWVudShub21icmU6IHN0cmluZywgcGxhdG8xOiBQbGF0bywgLi4ucGxhdG9zOiBQbGF0b1tdKSB7XG4gICAgbGV0IG51ZXZvTWVudSA9IG5ldyBNZW51KG5vbWJyZSwgcGxhdG8xLCAuLi5wbGF0b3MpO1xuICAgIHRoaXMuYXJyYXlNZW51LnB1c2gobnVldm9NZW51KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIG5vbWJyZSBkZSBsYSBDYXJ0YS5cbiAgICogQHJldHVybnMgTm9tYnJlIGRlIGxhIGNhcnRhLlxuICAgKi9cbiAgZ2V0Tm9tYnJlQ2FydGEoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5ub21icmVDYXJ0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIGFycmF5IGRlIGxvcyBNZW7DunMgZGUgbGEgY2FydGEuXG4gICAqIEByZXR1cm5zIEFycmF5IGRlIG1lbsO6cy5cbiAgICovXG4gIGdldEFsbE1lbnVzKCk6IE1lbnVbXSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlNZW51O1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgZWwgYXJyYXkgZGUgbG9zIFBsYXRvcyBzdWVsdG9zIGRlIGxhIGNhcnRhLlxuICAgKiBAcmV0dXJucyBBcnJheSBkZSBQbGF0b3MgU3VlbHRvcy5cbiAgICovXG4gIGdldEFsbFBsYXRvc1N1ZWx0b3MoKTogUGxhdG9bXSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlQbGF0b3NTdWVsdG9zO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgbGEgY2FydGEgY29tcGxldGEgZGVsIHJlc3RhdXJhbnRlIChtZW7DunMgeSBwbGF0b3Mgc3VlbHRvcykuXG4gICAqIEByZXR1cm5zIEFycmF5IGNvbiBtZW7DunMgeSBwbGF0b3Mgc3VlbHRvcy5cbiAgICovXG4gIGdldENhcnRhKCkge1xuICAgIGxldCBhcnJheUNhcnRhOiAoTWVudXxQbGF0bylbXSA9IFtdO1xuICAgIGFycmF5Q2FydGEucHVzaCguLi50aGlzLmdldEFsbE1lbnVzKCksIC4uLnRoaXMuZ2V0QWxsUGxhdG9zU3VlbHRvcygpKTtcbiAgICByZXR1cm4gYXJyYXlDYXJ0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jacOzbiBxdWUgYnVzY2EgZWwgbm9tYnJlIGluZGljYWRvIGVudHJlIGxvcyBtZW7DunMgeSBcbiAgICogZGV2dWVsdmUgdG9kYXMgbGFzIGNvaW5jaWRlbmNpYXMuXG4gICAqIEByZXR1cm5zIEFycmF5IGRlIHRvZG9zIGxvcyBtZW7DunMgcXVlIGNvbnRlbmdhbiBlc2EgY2FkZW5hIGVuIHN1IG5vbWJyZS5cbiAgICovXG4gIHNlYXJjaE1lbnUobm9tYnJlTWVudTogc3RyaW5nKTogTWVudVtdIHtcbiAgICBjb25zdCBhcnJheU1hdGNoZWRNZW51OiBNZW51W10gPSBbXTtcbiAgICB0aGlzLmFycmF5TWVudS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5nZXROb21icmVNZW51KCkuc2VhcmNoKG5vbWJyZU1lbnUpID4gLTEpIHtcbiAgICAgICAgYXJyYXlNYXRjaGVkTWVudS5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcnJheU1hdGNoZWRNZW51O1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmNpw7NuIHF1ZSBidXNjYSBlbCBub21icmUgaW5kaWNhZG8gZW50cmUgdG9kb3MgbG9zIFBsYXRvcywgZXMgZGVjaXIsXG4gICAqIGVudHJlIGxvcyBQbGF0b3Mgc3VlbHRvcyB5IGxvcyBQbGF0b3MgZGUgdW4gTWVuw7ouXG4gICAqIEByZXR1cm5zIEFycmF5IGRlIFBsYXRvcyBxdWUgY29udGVuZ2FuIGVzYSBjYWRlbmEgZW4gc3Ugbm9tYnJlLlxuICAgKi9cbiAgc2VhcmNoUGxhdG8obm9tYnJlUGxhdG86IHN0cmluZyk6IFBsYXRvW10ge1xuICAgIGNvbnN0IGFycmF5TWF0Y2hlZFBsYXRvczogUGxhdG9bXSA9IFtdO1xuICAgIHRoaXMuYXJyYXlQbGF0b3NTdWVsdG9zLmZvckVhY2goKHBsYXRvU3VlbHRvKSA9PiB7XG4gICAgICBpZiAocGxhdG9TdWVsdG8uZ2V0Tm9tYnJlUGxhdG8oKS5zZWFyY2gobm9tYnJlUGxhdG8pID4gLTEpIHtcbiAgICAgICAgYXJyYXlNYXRjaGVkUGxhdG9zLnB1c2gocGxhdG9TdWVsdG8pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYXJyYXlNZW51LmZvckVhY2goKGNhZGFNZW51KSA9PiB7XG4gICAgICBjYWRhTWVudS5nZXRQbGF0b3MoKS5mb3JFYWNoKChwbGF0b0RlbE1lbnUpID0+IHtcbiAgICAgICAgaWYgKHBsYXRvRGVsTWVudS5nZXROb21icmVQbGF0bygpLnNlYXJjaChub21icmVQbGF0bykgPiAtMSkge1xuICAgICAgICAgIGFycmF5TWF0Y2hlZFBsYXRvcy5wdXNoKHBsYXRvRGVsTWVudSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBhcnJheU1hdGNoZWRQbGF0b3M7XG4gIH1cblxuICAvKipcbiAgICogRnVuY2nDs24gcXVlIGJ1c2NhIGVsIHN0cmluZyBlbnRyZSB0b2RvcyBsb3Mgbm9tYnJlcyBkZSB0b2RvcyBsb3NcbiAgICogbWVuw7pzIHkgdG9kb3MgbG9zIHBsYXRvcyBkZSBsYSBjYXJ0YS5cbiAgICogQHJldHVybnMgQXJyYXkgZGUgdG9kYXMgbGFzIGNvaW5jaWRlbmNpYXMgKHNlYW4gTWVuw7pzIG8gUGxhdG9zKS5cbiAgICovXG4gIHNlYXJjaEVuR2VuZXJhbChub21icmU6IHN0cmluZyk6IChNZW51fFBsYXRvKVtdIHtcbiAgICBjb25zdCBhcnJheU1hdGNoZWQ6IChNZW51fFBsYXRvKVtdID0gW107XG4gICAgYXJyYXlNYXRjaGVkLnB1c2goLi4udGhpcy5zZWFyY2hNZW51KG5vbWJyZSkpO1xuICAgIGFycmF5TWF0Y2hlZC5wdXNoKC4uLnRoaXMuc2VhcmNoUGxhdG8obm9tYnJlKSk7XG4gICAgcmV0dXJuIGFycmF5TWF0Y2hlZDtcbiAgfVxufSJdfQ==