{"version":3,"file":"/home/usuario/dsi/practica6/src/ejercicio-3/basicStreamableCollection.ts","sources":["/home/usuario/dsi/practica6/src/ejercicio-3/basicStreamableCollection.ts"],"names":[],"mappings":";;;AAEA;;EAEE;AACF,MAAsB,yBAAyB;IAC/C;;;OAGG;IACA,YAAsB,KAAU;QAAV,UAAK,GAAL,KAAK,CAAK;IAAG,CAAC;IAErC;;;;;;;OAOG;IACH,OAAO,CAAC,OAAU;QAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;CAeF;AAhCD,8DAgCC","sourcesContent":["import { StreamableSearch } from \"./streamableSearch\";\n\n/**\n* __Esta es la clase genérica BasicStreamableCollection.__\n*/\nexport abstract class BasicStreamableCollection<T> implements StreamableSearch<T> {\n/**\n * Constructor de la clase BasicStreamableCollection.\n * @param items Colección de series, películas o documentales.\n */\n   constructor(protected items: T[]) {}\n\n  /**\n   * Este método permite añadir un nuevo item a la colección.\n   * @param newItem Ítem que queremos añadir.\n   * Usage:\n   * ```typescript\n   * addItem(\"Juego de tronos\") = items[\"Juego de tronos\"]\n   * ```\n   */\n  addItem(newItem: T): void {\n    this.items.push(newItem);\n  }\n\n  /**\n   * Este método busca el ítem y devuelve la colección.\n   * @param searchTerm Ítem que queremos buscar.\n   * @returns Devuelve la colección.\n   */\n  abstract getItem(searchTerm: string): T[];\n\n  /**\n   * Este método permite la búsqueda por nombre, año o calificación de la serie, película o documental.\n   * @param tipo Si quieres buscar por nombre, año o calificación.\n   * @param busqueda La palabra o valor que quieres buscar.\n   */\n  abstract search(tipo: string, busqueda: string): T[];\n}"]}