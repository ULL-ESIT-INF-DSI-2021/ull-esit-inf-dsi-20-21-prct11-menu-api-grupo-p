{"version":3,"file":"/home/usuario/dsi/practica7/src/carta.ts","sources":["/home/usuario/dsi/practica7/src/carta.ts"],"names":[],"mappings":";;;AAKA,iCAA8B;AAG9B;;GAEG;AACH,MAAa,KAAK;IAShB,YAAoB,WAAmB,EAAE,SAAiB,EAAE,kBAA2B;QAAnE,gBAAW,GAAX,WAAW,CAAQ;QARvC;;;;;WAKG;QACK,cAAS,GAAW,EAAE,CAAC;QACvB,uBAAkB,GAAY,EAAE,CAAC;QAEvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,CAAC,gCAAgC;IAChF,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,MAAc,EAAE,MAAa,EAAE,GAAG,MAAe;QACzD,IAAI,SAAS,GAAG,IAAI,WAAI,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,IAAI,UAAU,GAAmB,EAAE,CAAC;QACpC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,UAAkB;QAC3B,MAAM,gBAAgB,GAAW,EAAE,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnD,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,WAAmB;QAC7B,MAAM,kBAAkB,GAAY,EAAE,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YAC9C,IAAI,WAAW,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzD,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;gBAC5C,IAAI,YAAY,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC1D,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,MAAc;QAC5B,MAAM,YAAY,GAAmB,EAAE,CAAC;QACxC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9C,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/C,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AA5GD,sBA4GC","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\nimport { Plato } from \"./plato\";\nimport { Categoria } from \"./plato\";\nimport { Menu } from \"./menu\";\nimport * as inquirer from 'inquirer';\n\n/*\n * Esta es la clase Carta.\n */\nexport class Carta {\n  /**\n   * Constructor de la clase Carta.\n   * @param nombreCarta Nombre de la carta.\n   * @param arrayMenu Todos los menús que contiene la carta.\n   * @param arrayPlatosSueltos Todos los platos sueltos para que el comensales diseñen su propio menú.\n   */\n  private arrayMenu: Menu[] = [];\n  private arrayPlatosSueltos: Plato[] = [];\n  constructor(private nombreCarta: string, arrayMenu: Menu[], arrayPlatosSueltos: Plato[]) {\n    this.arrayMenu = arrayMenu;\n    this.arrayPlatosSueltos = arrayPlatosSueltos; // si no, se queja que no existe\n  }\n\n  /**\n   * Permite añadir nuevos menús creados por los comensales, combinando\n   * platos sueltos ya existentes.\n   * @param nombre Nombre del nuevo menú.\n   * @param plato1 Nombre del primer plato.\n   * @param platos Nombre de los demás platos.\n   */\n  nuevoMenu(nombre: string, plato1: Plato, ...platos: Plato[]) {\n    let nuevoMenu = new Menu(nombre, plato1, ...platos);\n    this.arrayMenu.push(nuevoMenu);\n  }\n\n  /**\n   * Obtiene el nombre de la Carta.\n   * @returns Nombre de la carta.\n   */\n  getNombreCarta(): string {\n    return this.nombreCarta;\n  }\n\n  /**\n   * Obtiene el array de los Menús de la carta.\n   * @returns Array de menús.\n   */\n  getAllMenus(): Menu[] {\n    return this.arrayMenu;\n  }\n\n  /**\n   * Obtiene el array de los Platos sueltos de la carta.\n   * @returns Array de Platos Sueltos.\n   */\n  getAllPlatosSueltos(): Plato[] {\n    return this.arrayPlatosSueltos;\n  }\n\n  /**\n   * Obtiene la carta completa del restaurante (menús y platos sueltos).\n   * @returns Array con menús y platos sueltos.\n   */\n  getCarta() {\n    let arrayCarta: (Menu|Plato)[] = [];\n    arrayCarta.push(...this.getAllMenus(), ...this.getAllPlatosSueltos());\n    return arrayCarta;\n  }\n\n  /**\n   * Función que busca el nombre indicado entre los menús y \n   * devuelve todas las coincidencias.\n   * @returns Array de todos los menús que contengan esa cadena en su nombre.\n   */\n  searchMenu(nombreMenu: string): Menu[] {\n    const arrayMatchedMenu: Menu[] = [];\n    this.arrayMenu.forEach((element) => {\n      if (element.getNombreMenu().search(nombreMenu) > -1) {\n        arrayMatchedMenu.push(element);\n      }\n    });\n    return arrayMatchedMenu;\n  }\n\n  /**\n   * Función que busca el nombre indicado entre todos los Platos, es decir,\n   * entre los Platos sueltos y los Platos de un Menú.\n   * @returns Array de Platos que contengan esa cadena en su nombre.\n   */\n  searchPlato(nombrePlato: string): Plato[] {\n    const arrayMatchedPlatos: Plato[] = [];\n    this.arrayPlatosSueltos.forEach((platoSuelto) => {\n      if (platoSuelto.getNombrePlato().search(nombrePlato) > -1) {\n        arrayMatchedPlatos.push(platoSuelto);\n      }\n    });\n    this.arrayMenu.forEach((cadaMenu) => {\n      cadaMenu.getPlatos().forEach((platoDelMenu) => {\n        if (platoDelMenu.getNombrePlato().search(nombrePlato) > -1) {\n          arrayMatchedPlatos.push(platoDelMenu);\n        }\n      });\n    });\n    return arrayMatchedPlatos;\n  }\n\n  /**\n   * Función que busca el string entre todos los nombres de todos los\n   * menús y todos los platos de la carta.\n   * @returns Array de todas las coincidencias (sean Menús o Platos).\n   */\n  searchEnGeneral(nombre: string): (Menu|Plato)[] {\n    const arrayMatched: (Menu|Plato)[] = [];\n    arrayMatched.push(...this.searchMenu(nombre));\n    arrayMatched.push(...this.searchPlato(nombre));\n    return arrayMatched;\n  }\n}"]}