{"version":3,"file":"/home/usuario/dsi/practica6/src/ejercicio-2/velocidad.ts","sources":["/home/usuario/dsi/practica6/src/ejercicio-2/velocidad.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,SAAS;IACtB;;;;OAIG;IACD,YAAoB,aAAqB,EAAU,cAAsB;QAArD,kBAAa,GAAb,aAAa,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAQ;IAAG,CAAC;IAE/E;;;OAGG;IACD,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEH;;;OAGG;IACD,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEH;;;;OAIG;IACD,SAAS,CAAC,KAAa;QAErB,IAAI,SAAS,GAAW,CAAC,CAAC;QAE1B,IAAI,IAAI,CAAC,gBAAgB,EAAE,KAAK,qBAAqB,EAAE;YACrD,IAAI,IAAI,CAAC,iBAAiB,EAAE,KAAK,iBAAiB;gBAChD,SAAS,GAAG,KAAK,GAAG,QAAQ,CAAC;SAChC;aACI,IAAI,IAAI,CAAC,gBAAgB,EAAE,KAAK,iBAAiB,EAAE;YACtD,IAAI,IAAI,CAAC,iBAAiB,EAAE,KAAK,qBAAqB;gBACpD,SAAS,GAAG,KAAK,GAAG,OAAO,CAAC;SAC/B;;YAEC,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAClD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA7CD,8BA6CC;AAED,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;AACrE,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,CAAC;AAExF,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,iBAAiB,EAAE,qBAAqB,CAAC,CAAC;AACrE,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,yBAAyB,CAAC,CAAC","sourcesContent":["import { isConvertible } from './isConvertible';\n\n/**\n * __Esta es la clase Velocidad.__\n */\nexport class Velocidad implements isConvertible<number> {\n/**\n * Constructor de la clase Velocidad.\n * @param primerSistema Nombre del primer sistema.\n * @param segundoSistema Nombre del segundo sistema.\n */\n  constructor(private primerSistema: string, private segundoSistema: string) {}\n\n/**\n * Este método se encarga de dar acceso al valor del atributo primerSistema aunque se acceda desde fuera de la clase Velocidad.\n * @return Devuelve el nombre del primerSistema.\n */\n  getPrimerSistema() {\n    return this.primerSistema;\n  }\n\n/**\n * Este método se encarga de dar acceso al valor del atributo segundoSistema aunque se acceda desde fuera de la clase Velocidad.\n * @return Devuelve el nombre del segundoSistema.\n */\n  getSegundoSistema() {\n    return this.segundoSistema;\n  }\n\n/**\n * Este método hace la conversión entre dos sistemas de unidades diferentes\n * @param valor El valor que tiene el sistema 1.\n * @return Devuelve el valor que tiene el sistema 2.\n */\n  conversor(valor: number): number {\n\n    let resultado: number = 0;\n\n    if (this.getPrimerSistema() === \"kilometros por hora\") {\n      if (this.getSegundoSistema() === \"millas por hora\")\n        resultado = valor * 0.621371;\n    }\n    else if (this.getPrimerSistema() === \"millas por hora\") {\n      if (this.getSegundoSistema() === \"kilometros por hora\")\n        resultado = valor * 1.60934;\n    }\n    else\n      throw new Error(\"Los sistemas no son válidos.\");\n    return resultado;\n  }\n}\n\nconst vel1 = new Velocidad(\"kilometros por hora\", \"millas por hora\");\nconsole.log(\"\\n20 kilometros por hora son \" + vel1.conversor(20) + \" millas por hora.\");\n\nconst vel2 = new Velocidad(\"millas por hora\", \"kilometros por hora\");\nconsole.log(\"20 millas por hora son \" + vel2.conversor(20) + \" kilometros por hora.\\n\");"]}