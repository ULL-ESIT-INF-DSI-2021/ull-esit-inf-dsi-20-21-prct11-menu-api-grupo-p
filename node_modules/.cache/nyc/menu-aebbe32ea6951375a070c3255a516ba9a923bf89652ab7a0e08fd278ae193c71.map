{"version":3,"file":"/home/usuario/dsi/practica7/src/menu.ts","sources":["/home/usuario/dsi/practica7/src/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\nimport { Plato } from \"./plato\";\nimport { Categoria } from \"./plato\";\n\n/*\n * Esta es la clase Menu.\n */\nexport class Menu {\n  /**\n   * Constructor de la clase Menu. Comprueba que existan al menos 3 platos de 3 categorías \n   * distintas (Entrante, Primero, Segundo y Postre) en cada Menú. Si no los hay, devuelve un error.\n   * @param nombreMenu Nombre del plato en cuestión.\n   * @param primerPlato Primer plato del menú\n   * @param demasPlatos Array donde se almacenan el resto de los platos del menú.\n   */\n  private precio: number = 0;\n  private arrayPlatos: Plato[] = [];\n  constructor(private nombreMenu: string, private primerPlato: Plato, ...demasPlatos: Plato[]) {\n    this.arrayPlatos.push(primerPlato);\n    demasPlatos.forEach((element) => {\n      this.arrayPlatos.push(element);\n    });\n\n    let existeEntrante: number = 0;\n    let existePrimero: number = 0;\n    let existeSegundo: number = 0;\n    let existePostre: number = 0;\n    let grupoElemento: Categoria;\n    this.arrayPlatos.forEach((elemento) => {\n      grupoElemento = elemento.getCategoria();\n      if (grupoElemento === 'ENTRANTE') {\n        existeEntrante = 1;\n      } else if (grupoElemento === 'PRIMERO') {\n        existePrimero = 1;\n      } else if (grupoElemento === 'SEGUNDO') {\n        existeSegundo = 1;\n      } else if (grupoElemento === 'POSTRE') {\n        existePostre = 1;\n      }\n    });\n    const counts = existeEntrante + existePrimero + existeSegundo + existePostre;\n    if (counts < 3) {\n      throw new Error(\"Los menús deben tener 3 categorías de platos como mínimo.\");\n    }\n  }\n\n  /**\n   * Obtiene el nombre del menú.\n   * @returns Nombre del menú.\n   */\n  getNombreMenu() {\n    return this.nombreMenu;\n  }\n\n  /**\n   * Obtiene los platos que componen el menú.\n   * @returns Listado de los platos del menú.\n   */\n  getPlatos(){\n    return this.arrayPlatos;\n  }\n\n  /**\n   * Obtiene la composición nutricional del menú, obteníendola plato por plato.\n   * @returns Cantidad total de carbohidratos, proteínas y lípidos del menú.\n   */\n  getComposicionNutricional() {\n    let composicionNutricional: Macronutrientes = {carbohidratos: 0, proteinas: 0, lipidos: 0};\n    this.arrayPlatos.forEach((elemento) => {\n      composicionNutricional.carbohidratos += elemento.calculoMacronutrientes().carbohidratos;\n      composicionNutricional.proteinas += elemento.calculoMacronutrientes().proteinas;\n      composicionNutricional.lipidos += elemento.calculoMacronutrientes().lipidos;\n    });\n    return composicionNutricional;\n  }\n  \n  /**\n   * Obtiene los grupos de alimentos que componen el menú. Almacena todos los grupos de \n   * todos los alimentos de todos los platos y al final filtrar para tener una copia de\n   * cada. Este listado final de grupos únicos es lo que devuelve.\n   * @returns Listado de grupos de alimentos (únicos) de todo el menú.\n   */\n  getGruposAlimentos(): Grupo[] {\n    let arrayGruposAlimentos: Grupo[] = [];\n    let platosGrupo: [Alimento, number][] = [];\n    //let valorGrupo: any;\n    this.arrayPlatos.forEach((cadaPlato) => {\n      cadaPlato.getAlimentos().forEach((cadaAlimento) => {\n        arrayGruposAlimentos.push(cadaAlimento[0].getGrupo());\n        //valorGrupo = alimento[0].getGrupo();\n        //arrayGruposAlimentos[valorGrupo] = 1 + (arrayGruposAlimentos[valorGrupo] || 0)\n      });;\n    });\n    const arrayFinal: Grupo[] = arrayGruposAlimentos.filter((n, i) => arrayGruposAlimentos.indexOf(n) === i);\n    return arrayFinal;\n  }\n  \n  /**\n   * Obtiene el precio del menú sumando los precios de sus platos.\n   * @returns Precio (en euros) del menú.\n   */\n  getPrecioMenu(): number {\n    let precioTotal: number = 0;\n    this.arrayPlatos.forEach((element) => {\n      precioTotal += element.getPrecio();\n    });\n    return precioTotal;\n  }\n}"]}