"use strict";function cov_1h57pmb8vu(){var path="/home/usuario/dsi/practica7/src/alimento.ts";var hash="ecb5400302177de38b1b65cc6ddb0a2bea0d2867";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/dsi/practica7/src/alimento.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:26}},"2":{start:{line:18,column:8},end:{line:18,column:45}},"3":{start:{line:19,column:8},end:{line:19,column:29}},"4":{start:{line:20,column:8},end:{line:20,column:29}},"5":{start:{line:21,column:8},end:{line:21,column:33}},"6":{start:{line:22,column:8},end:{line:22,column:29}},"7":{start:{line:23,column:8},end:{line:23,column:27}},"8":{start:{line:30,column:8},end:{line:30,column:35}},"9":{start:{line:37,column:8},end:{line:37,column:27}},"10":{start:{line:44,column:8},end:{line:44,column:27}},"11":{start:{line:51,column:8},end:{line:51,column:29}},"12":{start:{line:58,column:8},end:{line:58,column:27}},"13":{start:{line:65,column:8},end:{line:65,column:26}},"14":{start:{line:68,column:0},end:{line:68,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:73},end:{line:24,column:5}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:24},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:16},end:{line:38,column:5}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:16},end:{line:45,column:5}},line:43},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:18},end:{line:52,column:5}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:25},end:{line:59,column:5}},line:57},"6":{name:"(anonymous_6)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:15},end:{line:66,column:5}},line:64}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/dsi/practica7/src/alimento.ts",sources:["/home/usuario/dsi/practica7/src/alimento.ts"],names:[],mappings:";;;AAkBA;;GAEG;AACH,MAAa,QAAQ;IAEnB;;;;;;;;OAQG;IACH,YAAoB,cAAsB,EAAU,MAAc,EAAU,MAAc,EAClF,QAAgB,EAAU,MAAuB,EAAU,KAAY;QAD3D,mBAAc,GAAd,cAAc,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QAClF,aAAQ,GAAR,QAAQ,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAiB;QAAU,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;IAEnF;;;OAGG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AA7DD,4BA6DC",sourcesContent:["/**\n * Tipo de datos Macronutrientes. Servir\xE1 como composici\xF3n nutricional de los alimentos.\n * @param carbohidratos Cantidad de hidratos de carbono por cada 100 gr que posee el alimento.\n * @param proteinas Cantidad de prote\xEDnas por cada 100 gr que posee el alimento.\n * @param lipidos Cantidad de l\xEDpidos por cada 100 gr de carbono que posee el alimento.\n */\nexport type Macronutrientes = {\n  carbohidratos: number,\n  proteinas: number,\n  lipidos: number\n}\n\n/**\n * Tipo de datos Grupo. Es el grupo de alimentos al que pertenece el alimento.\n */\nexport type Grupo = 'CARNES' | 'PESCADOS' | 'HUEVOS' | 'TOFU' | 'FRUTOS_SECOS' | 'SEMILLAS' | 'LEGUMBRES' |\n'VERDURAS' | 'HORTALIZAS' | 'LACTEOS' | 'CEREALES' | 'FRUTAS' | 'PROCESADOS';\n\n/**\n * Esta es la clase Alimento.\n */\nexport class Alimento {\n  \n  /**\n   * Constructor de la clase Alimento\n   * @param nombreAlimento Nombre del alimento en cuesti\xF3n.\n   * @param precio Precio del alimento.\n   * @param origen Localizaci\xF3n de origen del alimento (pa\xEDs, ciudad, etc.).\n   * @param calorias Kilocalor\xEDas por 100 gramos de dicho alimento.\n   * @param macros Los macronutrientes que posee el alimento por cada 100 gr(carbohidratos, prot\xEDnas y l\xEDpidos).\n   * @param grupo Grupo de alimentos al que pertenece el alimento.\n   */\n  constructor(private nombreAlimento: string, private precio: number, private origen: string,\n  private calorias: number, private macros: Macronutrientes, private grupo: Grupo) {}\n\n  /**\n   * Obtiene el nombre del alimento.\n   * @returns Nombre del alimento.\n   */\n  getNombreAlimento() {\n    return this.nombreAlimento;\n  }\n\n  /**\n   * Obtiene el precio por Kg (en euros).\n   * @returns Precio del alimento por Kg.\n   */\n  getPrecio() {\n    return this.precio;\n  }\n\n  /**\n   * Obtiene el origen del alimento.\n   * @returns Origen del alimento.\n   */\n  getOrigen() {\n    return this.origen;\n  }\n\n  /**\n   * Obtiene kilocalor\xEDas (kcal) por 100 gr de dicho alimento.\n   * @returns kcal del alimento.\n   */\n  getCalorias() {\n    return this.calorias;\n  }\n\n  /**\n   * Obtiene los macronutrientes del alimento por 100 gr.\n   * @returns Macronutrientes del alimento.\n   */\n  getMacronutrientes() {\n    return this.macros;\n  }\n\n  /**\n   * Obtiene el grupo del alimento\n   * @returns Grupo del alimento.\n   */\n  getGrupo() {\n    return this.grupo;\n  }\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ecb5400302177de38b1b65cc6ddb0a2bea0d2867"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1h57pmb8vu=function(){return actualCoverage;};}return actualCoverage;}cov_1h57pmb8vu();cov_1h57pmb8vu().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1h57pmb8vu().s[1]++;exports.Alimento=void 0;/**
 * Esta es la clase Alimento.
 */class Alimento{/**
     * Constructor de la clase Alimento
     * @param nombreAlimento Nombre del alimento en cuestión.
     * @param precio Precio del alimento.
     * @param origen Localización de origen del alimento (país, ciudad, etc.).
     * @param calorias Kilocalorías por 100 gramos de dicho alimento.
     * @param macros Los macronutrientes que posee el alimento por cada 100 gr(carbohidratos, protínas y lípidos).
     * @param grupo Grupo de alimentos al que pertenece el alimento.
     */constructor(nombreAlimento,precio,origen,calorias,macros,grupo){cov_1h57pmb8vu().f[0]++;cov_1h57pmb8vu().s[2]++;this.nombreAlimento=nombreAlimento;cov_1h57pmb8vu().s[3]++;this.precio=precio;cov_1h57pmb8vu().s[4]++;this.origen=origen;cov_1h57pmb8vu().s[5]++;this.calorias=calorias;cov_1h57pmb8vu().s[6]++;this.macros=macros;cov_1h57pmb8vu().s[7]++;this.grupo=grupo;}/**
     * Obtiene el nombre del alimento.
     * @returns Nombre del alimento.
     */getNombreAlimento(){cov_1h57pmb8vu().f[1]++;cov_1h57pmb8vu().s[8]++;return this.nombreAlimento;}/**
     * Obtiene el precio por Kg (en euros).
     * @returns Precio del alimento por Kg.
     */getPrecio(){cov_1h57pmb8vu().f[2]++;cov_1h57pmb8vu().s[9]++;return this.precio;}/**
     * Obtiene el origen del alimento.
     * @returns Origen del alimento.
     */getOrigen(){cov_1h57pmb8vu().f[3]++;cov_1h57pmb8vu().s[10]++;return this.origen;}/**
     * Obtiene kilocalorías (kcal) por 100 gr de dicho alimento.
     * @returns kcal del alimento.
     */getCalorias(){cov_1h57pmb8vu().f[4]++;cov_1h57pmb8vu().s[11]++;return this.calorias;}/**
     * Obtiene los macronutrientes del alimento por 100 gr.
     * @returns Macronutrientes del alimento.
     */getMacronutrientes(){cov_1h57pmb8vu().f[5]++;cov_1h57pmb8vu().s[12]++;return this.macros;}/**
     * Obtiene el grupo del alimento
     * @returns Grupo del alimento.
     */getGrupo(){cov_1h57pmb8vu().f[6]++;cov_1h57pmb8vu().s[13]++;return this.grupo;}}cov_1h57pmb8vu().s[14]++;exports.Alimento=Alimento;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9kc2kvcHJhY3RpY2E3L3NyYy9hbGltZW50by50cyIsInNvdXJjZXMiOlsiL2hvbWUvdXN1YXJpby9kc2kvcHJhY3RpY2E3L3NyYy9hbGltZW50by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFrQkE7O0dBRUc7QUFDSCxNQUFhLFFBQVE7SUFFbkI7Ozs7Ozs7O09BUUc7SUFDSCxZQUFvQixjQUFzQixFQUFVLE1BQWMsRUFBVSxNQUFjLEVBQ2xGLFFBQWdCLEVBQVUsTUFBdUIsRUFBVSxLQUFZO1FBRDNELG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDbEYsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBTztJQUFHLENBQUM7SUFFbkY7OztPQUdHO0lBQ0gsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Q0FDRjtBQTdERCw0QkE2REMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRpcG8gZGUgZGF0b3MgTWFjcm9udXRyaWVudGVzLiBTZXJ2aXLDoSBjb21vIGNvbXBvc2ljacOzbiBudXRyaWNpb25hbCBkZSBsb3MgYWxpbWVudG9zLlxuICogQHBhcmFtIGNhcmJvaGlkcmF0b3MgQ2FudGlkYWQgZGUgaGlkcmF0b3MgZGUgY2FyYm9ubyBwb3IgY2FkYSAxMDAgZ3IgcXVlIHBvc2VlIGVsIGFsaW1lbnRvLlxuICogQHBhcmFtIHByb3RlaW5hcyBDYW50aWRhZCBkZSBwcm90ZcOtbmFzIHBvciBjYWRhIDEwMCBnciBxdWUgcG9zZWUgZWwgYWxpbWVudG8uXG4gKiBAcGFyYW0gbGlwaWRvcyBDYW50aWRhZCBkZSBsw61waWRvcyBwb3IgY2FkYSAxMDAgZ3IgZGUgY2FyYm9ubyBxdWUgcG9zZWUgZWwgYWxpbWVudG8uXG4gKi9cbmV4cG9ydCB0eXBlIE1hY3JvbnV0cmllbnRlcyA9IHtcbiAgY2FyYm9oaWRyYXRvczogbnVtYmVyLFxuICBwcm90ZWluYXM6IG51bWJlcixcbiAgbGlwaWRvczogbnVtYmVyXG59XG5cbi8qKlxuICogVGlwbyBkZSBkYXRvcyBHcnVwby4gRXMgZWwgZ3J1cG8gZGUgYWxpbWVudG9zIGFsIHF1ZSBwZXJ0ZW5lY2UgZWwgYWxpbWVudG8uXG4gKi9cbmV4cG9ydCB0eXBlIEdydXBvID0gJ0NBUk5FUycgfCAnUEVTQ0FET1MnIHwgJ0hVRVZPUycgfCAnVE9GVScgfCAnRlJVVE9TX1NFQ09TJyB8ICdTRU1JTExBUycgfCAnTEVHVU1CUkVTJyB8XG4nVkVSRFVSQVMnIHwgJ0hPUlRBTElaQVMnIHwgJ0xBQ1RFT1MnIHwgJ0NFUkVBTEVTJyB8ICdGUlVUQVMnIHwgJ1BST0NFU0FET1MnO1xuXG4vKipcbiAqIEVzdGEgZXMgbGEgY2xhc2UgQWxpbWVudG8uXG4gKi9cbmV4cG9ydCBjbGFzcyBBbGltZW50byB7XG4gIFxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZGUgbGEgY2xhc2UgQWxpbWVudG9cbiAgICogQHBhcmFtIG5vbWJyZUFsaW1lbnRvIE5vbWJyZSBkZWwgYWxpbWVudG8gZW4gY3Vlc3Rpw7NuLlxuICAgKiBAcGFyYW0gcHJlY2lvIFByZWNpbyBkZWwgYWxpbWVudG8uXG4gICAqIEBwYXJhbSBvcmlnZW4gTG9jYWxpemFjacOzbiBkZSBvcmlnZW4gZGVsIGFsaW1lbnRvIChwYcOtcywgY2l1ZGFkLCBldGMuKS5cbiAgICogQHBhcmFtIGNhbG9yaWFzIEtpbG9jYWxvcsOtYXMgcG9yIDEwMCBncmFtb3MgZGUgZGljaG8gYWxpbWVudG8uXG4gICAqIEBwYXJhbSBtYWNyb3MgTG9zIG1hY3JvbnV0cmllbnRlcyBxdWUgcG9zZWUgZWwgYWxpbWVudG8gcG9yIGNhZGEgMTAwIGdyKGNhcmJvaGlkcmF0b3MsIHByb3TDrW5hcyB5IGzDrXBpZG9zKS5cbiAgICogQHBhcmFtIGdydXBvIEdydXBvIGRlIGFsaW1lbnRvcyBhbCBxdWUgcGVydGVuZWNlIGVsIGFsaW1lbnRvLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBub21icmVBbGltZW50bzogc3RyaW5nLCBwcml2YXRlIHByZWNpbzogbnVtYmVyLCBwcml2YXRlIG9yaWdlbjogc3RyaW5nLFxuICBwcml2YXRlIGNhbG9yaWFzOiBudW1iZXIsIHByaXZhdGUgbWFjcm9zOiBNYWNyb251dHJpZW50ZXMsIHByaXZhdGUgZ3J1cG86IEdydXBvKSB7fVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIG5vbWJyZSBkZWwgYWxpbWVudG8uXG4gICAqIEByZXR1cm5zIE5vbWJyZSBkZWwgYWxpbWVudG8uXG4gICAqL1xuICBnZXROb21icmVBbGltZW50bygpIHtcbiAgICByZXR1cm4gdGhpcy5ub21icmVBbGltZW50bztcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIHByZWNpbyBwb3IgS2cgKGVuIGV1cm9zKS5cbiAgICogQHJldHVybnMgUHJlY2lvIGRlbCBhbGltZW50byBwb3IgS2cuXG4gICAqL1xuICBnZXRQcmVjaW8oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJlY2lvO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgZWwgb3JpZ2VuIGRlbCBhbGltZW50by5cbiAgICogQHJldHVybnMgT3JpZ2VuIGRlbCBhbGltZW50by5cbiAgICovXG4gIGdldE9yaWdlbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcmlnZW47XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBraWxvY2Fsb3LDrWFzIChrY2FsKSBwb3IgMTAwIGdyIGRlIGRpY2hvIGFsaW1lbnRvLlxuICAgKiBAcmV0dXJucyBrY2FsIGRlbCBhbGltZW50by5cbiAgICovXG4gIGdldENhbG9yaWFzKCkge1xuICAgIHJldHVybiB0aGlzLmNhbG9yaWFzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgbG9zIG1hY3JvbnV0cmllbnRlcyBkZWwgYWxpbWVudG8gcG9yIDEwMCBnci5cbiAgICogQHJldHVybnMgTWFjcm9udXRyaWVudGVzIGRlbCBhbGltZW50by5cbiAgICovXG4gIGdldE1hY3JvbnV0cmllbnRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tYWNyb3M7XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBlbCBncnVwbyBkZWwgYWxpbWVudG9cbiAgICogQHJldHVybnMgR3J1cG8gZGVsIGFsaW1lbnRvLlxuICAgKi9cbiAgZ2V0R3J1cG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3J1cG87XG4gIH1cbn0iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vZHNpL3ByYWN0aWNhNy9zcmMvYWxpbWVudG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InF1TEErQks7NE5BYkw7O0FBRUcsR0FDSCxLQUFhLENBQUEsUUFBUSxDQUVuQjs7Ozs7Ozs7QUFRRyxPQUNILFdBQUEsQ0FBb0IsY0FBcEIsQ0FBb0QsTUFBcEQsQ0FBNEUsTUFBNUUsQ0FDUSxRQURSLENBQ2tDLE1BRGxDLENBQ21FLEtBRG5FLENBQytFLGlEQUQzRCxLQUFBLGNBQUEsQ0FBQSxjQUFBLENBQzJELHdCQUQzQixLQUFBLE1BQUEsQ0FBQSxNQUFBLENBQzJCLHdCQURILEtBQUEsTUFBQSxDQUFBLE1BQUEsQ0FDRyx3QkFBdkUsS0FBQSxRQUFBLENBQUEsUUFBQSxDQUF1RSx3QkFBN0MsS0FBQSxNQUFBLENBQUEsTUFBQSxDQUE2Qyx3QkFBWixLQUFBLEtBQUEsQ0FBQSxLQUFBLENBQWdCLENBRW5GOzs7QUFHRyxPQUNILGlCQUFpQixFQUFBLGlEQUNmLE1BQU8sTUFBSyxjQUFaLENBQ0QsQ0FFRDs7O0FBR0csT0FDSCxTQUFTLEVBQUEsaURBQ1AsTUFBTyxNQUFLLE1BQVosQ0FDRCxDQUVEOzs7QUFHRyxPQUNILFNBQVMsRUFBQSxrREFDUCxNQUFPLE1BQUssTUFBWixDQUNELENBRUQ7OztBQUdHLE9BQ0gsV0FBVyxFQUFBLGtEQUNULE1BQU8sTUFBSyxRQUFaLENBQ0QsQ0FFRDs7O0FBR0csT0FDSCxrQkFBa0IsRUFBQSxrREFDaEIsTUFBTyxNQUFLLE1BQVosQ0FDRCxDQUVEOzs7QUFHRyxPQUNILFFBQVEsRUFBQSxrREFDTixNQUFPLE1BQUssS0FBWixDQUNELENBNURrQixDLHlCQUFyQixPQUFBLENBQUEsUUFBQSxDQUFBLFFBQUEsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGlwbyBkZSBkYXRvcyBNYWNyb251dHJpZW50ZXMuIFNlcnZpcsOhIGNvbW8gY29tcG9zaWNpw7NuIG51dHJpY2lvbmFsIGRlIGxvcyBhbGltZW50b3MuXG4gKiBAcGFyYW0gY2FyYm9oaWRyYXRvcyBDYW50aWRhZCBkZSBoaWRyYXRvcyBkZSBjYXJib25vIHBvciBjYWRhIDEwMCBnciBxdWUgcG9zZWUgZWwgYWxpbWVudG8uXG4gKiBAcGFyYW0gcHJvdGVpbmFzIENhbnRpZGFkIGRlIHByb3Rlw61uYXMgcG9yIGNhZGEgMTAwIGdyIHF1ZSBwb3NlZSBlbCBhbGltZW50by5cbiAqIEBwYXJhbSBsaXBpZG9zIENhbnRpZGFkIGRlIGzDrXBpZG9zIHBvciBjYWRhIDEwMCBnciBkZSBjYXJib25vIHF1ZSBwb3NlZSBlbCBhbGltZW50by5cbiAqL1xuZXhwb3J0IHR5cGUgTWFjcm9udXRyaWVudGVzID0ge1xuICBjYXJib2hpZHJhdG9zOiBudW1iZXIsXG4gIHByb3RlaW5hczogbnVtYmVyLFxuICBsaXBpZG9zOiBudW1iZXJcbn1cblxuLyoqXG4gKiBUaXBvIGRlIGRhdG9zIEdydXBvLiBFcyBlbCBncnVwbyBkZSBhbGltZW50b3MgYWwgcXVlIHBlcnRlbmVjZSBlbCBhbGltZW50by5cbiAqL1xuZXhwb3J0IHR5cGUgR3J1cG8gPSAnQ0FSTkVTJyB8ICdQRVNDQURPUycgfCAnSFVFVk9TJyB8ICdUT0ZVJyB8ICdGUlVUT1NfU0VDT1MnIHwgJ1NFTUlMTEFTJyB8ICdMRUdVTUJSRVMnIHxcbidWRVJEVVJBUycgfCAnSE9SVEFMSVpBUycgfCAnTEFDVEVPUycgfCAnQ0VSRUFMRVMnIHwgJ0ZSVVRBUycgfCAnUFJPQ0VTQURPUyc7XG5cbi8qKlxuICogRXN0YSBlcyBsYSBjbGFzZSBBbGltZW50by5cbiAqL1xuZXhwb3J0IGNsYXNzIEFsaW1lbnRvIHtcbiAgXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBkZSBsYSBjbGFzZSBBbGltZW50b1xuICAgKiBAcGFyYW0gbm9tYnJlQWxpbWVudG8gTm9tYnJlIGRlbCBhbGltZW50byBlbiBjdWVzdGnDs24uXG4gICAqIEBwYXJhbSBwcmVjaW8gUHJlY2lvIGRlbCBhbGltZW50by5cbiAgICogQHBhcmFtIG9yaWdlbiBMb2NhbGl6YWNpw7NuIGRlIG9yaWdlbiBkZWwgYWxpbWVudG8gKHBhw61zLCBjaXVkYWQsIGV0Yy4pLlxuICAgKiBAcGFyYW0gY2Fsb3JpYXMgS2lsb2NhbG9yw61hcyBwb3IgMTAwIGdyYW1vcyBkZSBkaWNobyBhbGltZW50by5cbiAgICogQHBhcmFtIG1hY3JvcyBMb3MgbWFjcm9udXRyaWVudGVzIHF1ZSBwb3NlZSBlbCBhbGltZW50byBwb3IgY2FkYSAxMDAgZ3IoY2FyYm9oaWRyYXRvcywgcHJvdMOtbmFzIHkgbMOtcGlkb3MpLlxuICAgKiBAcGFyYW0gZ3J1cG8gR3J1cG8gZGUgYWxpbWVudG9zIGFsIHF1ZSBwZXJ0ZW5lY2UgZWwgYWxpbWVudG8uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vbWJyZUFsaW1lbnRvOiBzdHJpbmcsIHByaXZhdGUgcHJlY2lvOiBudW1iZXIsIHByaXZhdGUgb3JpZ2VuOiBzdHJpbmcsXG4gIHByaXZhdGUgY2Fsb3JpYXM6IG51bWJlciwgcHJpdmF0ZSBtYWNyb3M6IE1hY3JvbnV0cmllbnRlcywgcHJpdmF0ZSBncnVwbzogR3J1cG8pIHt9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgZWwgbm9tYnJlIGRlbCBhbGltZW50by5cbiAgICogQHJldHVybnMgTm9tYnJlIGRlbCBhbGltZW50by5cbiAgICovXG4gIGdldE5vbWJyZUFsaW1lbnRvKCkge1xuICAgIHJldHVybiB0aGlzLm5vbWJyZUFsaW1lbnRvO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGllbmUgZWwgcHJlY2lvIHBvciBLZyAoZW4gZXVyb3MpLlxuICAgKiBAcmV0dXJucyBQcmVjaW8gZGVsIGFsaW1lbnRvIHBvciBLZy5cbiAgICovXG4gIGdldFByZWNpbygpIHtcbiAgICByZXR1cm4gdGhpcy5wcmVjaW87XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBlbCBvcmlnZW4gZGVsIGFsaW1lbnRvLlxuICAgKiBAcmV0dXJucyBPcmlnZW4gZGVsIGFsaW1lbnRvLlxuICAgKi9cbiAgZ2V0T3JpZ2VuKCkge1xuICAgIHJldHVybiB0aGlzLm9yaWdlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGtpbG9jYWxvcsOtYXMgKGtjYWwpIHBvciAxMDAgZ3IgZGUgZGljaG8gYWxpbWVudG8uXG4gICAqIEByZXR1cm5zIGtjYWwgZGVsIGFsaW1lbnRvLlxuICAgKi9cbiAgZ2V0Q2Fsb3JpYXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2Fsb3JpYXM7XG4gIH1cblxuICAvKipcbiAgICogT2J0aWVuZSBsb3MgbWFjcm9udXRyaWVudGVzIGRlbCBhbGltZW50byBwb3IgMTAwIGdyLlxuICAgKiBAcmV0dXJucyBNYWNyb251dHJpZW50ZXMgZGVsIGFsaW1lbnRvLlxuICAgKi9cbiAgZ2V0TWFjcm9udXRyaWVudGVzKCkge1xuICAgIHJldHVybiB0aGlzLm1hY3JvcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnRpZW5lIGVsIGdydXBvIGRlbCBhbGltZW50b1xuICAgKiBAcmV0dXJucyBHcnVwbyBkZWwgYWxpbWVudG8uXG4gICAqL1xuICBnZXRHcnVwbygpIHtcbiAgICByZXR1cm4gdGhpcy5ncnVwbztcbiAgfVxufSJdfQ==